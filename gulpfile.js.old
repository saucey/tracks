
// Later use for setting variables for the strings
var basePaths = {
    src: 'app/public/',
    dest: 'app/build/',
    bower: 'bower_components/'
};

var gulp = require('gulp'),
    sass = require('gulp-ruby-sass'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-minify-css'),
    source = require('vinyl-source-stream'),
    concat = require('gulp-concat'),
    browserify = require('browserify');
    rename = require('gulp-rename');
    browserSync = require('browser-sync');

gulp.task('express', function() {
  var express = require('express');
  var app = express();
  app.use(require('connect-livereload')({port: 4002}));
  app.use(express.static(__dirname + '/app'));
  app.listen(4000);
});

gulp.task('browserify', function() {
  return browserify({ entries: ['app/public/js/app.js'] })
    .bundle()
    .pipe(source('app.js'))
    .pipe(gulp.dest('app/build/'));
});

gulp.task('styles', function() {
  return sass('app/public/sass/main.scss',{ style: 'expanded' })
    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1'))
    .pipe(gulp.dest('app/public/css'))
    .pipe(rename({suffix: '.min'}))
    .pipe(minifycss())
    .pipe(gulp.dest('app/build/'))
});

var tinylr;
gulp.task('livereload', function() {
  tinylr = require('tiny-lr')();
  tinylr.listen(4002);
});

function notifyLiveReload(event) {
  var fileName = require('path').relative(__dirname, event.path);
  tinylr.changed({
    body: {
      files: [fileName]
    }
  });
}

gulp.task('watch', function() {
  gulp.watch('app/public/sass/*.scss', ['styles']);
  gulp.watch('app/public/js/**/*.js', notifyLiveReload);
  gulp.watch('app/views/**/*.html', notifyLiveReload);
});

gulp.task('default', ['browserify', 'styles', 'express', 'livereload', 'watch'], function() {
  browserSync.init(['app/public/sass/*.scss'], {
     port: 4000,
     server: {
       baseDir: "app"
     }
   });
});

